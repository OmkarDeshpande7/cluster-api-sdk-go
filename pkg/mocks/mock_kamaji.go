// Code generated by MockGen. DO NOT EDIT.
// Source: ../../controlplane/kamaji/kamaji.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination=./mock_kamaji.go -source=../../controlplane/kamaji/kamaji.go -build_flags=-mod=mod
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	controlplane "github.com/platform9/cluster-api-sdk-go/controlplane"
	gomock "go.uber.org/mock/gomock"
)

// MockKamajiProvider is a mock of KamajiProvider interface.
type MockKamajiProvider struct {
	ctrl     *gomock.Controller
	recorder *MockKamajiProviderMockRecorder
}

// MockKamajiProviderMockRecorder is the mock recorder for MockKamajiProvider.
type MockKamajiProviderMockRecorder struct {
	mock *MockKamajiProvider
}

// NewMockKamajiProvider creates a new mock instance.
func NewMockKamajiProvider(ctrl *gomock.Controller) *MockKamajiProvider {
	mock := &MockKamajiProvider{ctrl: ctrl}
	mock.recorder = &MockKamajiProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKamajiProvider) EXPECT() *MockKamajiProviderMockRecorder {
	return m.recorder
}

// CreateControlPlane mocks base method.
func (m *MockKamajiProvider) CreateControlPlane(ctx context.Context, input controlplane.CreateControlPlaneInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateControlPlane", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateControlPlane indicates an expected call of CreateControlPlane.
func (mr *MockKamajiProviderMockRecorder) CreateControlPlane(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateControlPlane", reflect.TypeOf((*MockKamajiProvider)(nil).CreateControlPlane), ctx, input)
}

// DeleteControlPlane mocks base method.
func (m *MockKamajiProvider) DeleteControlPlane(ctx context.Context, input controlplane.DeleteControlPlaneInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteControlPlane", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteControlPlane indicates an expected call of DeleteControlPlane.
func (mr *MockKamajiProviderMockRecorder) DeleteControlPlane(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteControlPlane", reflect.TypeOf((*MockKamajiProvider)(nil).DeleteControlPlane), ctx, input)
}

// GetControlPlane mocks base method.
func (m *MockKamajiProvider) GetControlPlane(ctx context.Context, input controlplane.GetControlPlaneInput) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlPlane", ctx, input)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlPlane indicates an expected call of GetControlPlane.
func (mr *MockKamajiProviderMockRecorder) GetControlPlane(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlPlane", reflect.TypeOf((*MockKamajiProvider)(nil).GetControlPlane), ctx, input)
}
